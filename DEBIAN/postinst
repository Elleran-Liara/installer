#!/bin/bash

# Create necessary directories
mkdir -p /opt/centrunk/installer
cd /opt/centrunk/installer

# Download the GitHub repository as a ZIP file
wget https://github.com/DVMProject/dvmhost/archive/refs/heads/master.zip

# Unzip the repository
unzip master.zip

# Move to the unzipped directory
cd dvmhost-master

# Use dialog to present choices to the user
cmd=(dialog --menu "Choose the cross-compile option:" 22 76 16)
options=(
   1 "CROSS_COMPILE_ARM"
   2 "CROSS_COMPILE_AARCH64"
   3 "CROSS_COMPILE_RPI_ARM"
   4 "Cancel"
)
choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

# Create build directory and move to it
mkdir -p /opt/centrunk/installer/build
cd /opt/centrunk/installer/build

# Execute the chosen cmake command
case $choice in
    1)
        cmake /opt/centrunk/installer/dvmhost-master -DCROSS_COMPILE_ARM=1
        ;;
    2)
        cmake /opt/centrunk/installer/dvmhost-master -DCROSS_COMPILE_AARCH64=1
        ;;
    3)
        cmake /opt/centrunk/installer/dvmhost-master -DCROSS_COMPILE_RPI_ARM=1
        ;;
    4)
        exit 0
        ;;
esac

# Compile the code
make

# Move the binaries to the target directory
mkdir -p /opt/centrunk/dvmhost/
mv dvmhost dvmcmd /opt/centrunk/dvmhost/


# Configuration files location
CONFIG_DIR="/opt/centrunk/configs"

# Configuration files
CONFIG_FILES=("configCC1.yml" "configVC1.yml" "configDVRS1.yml" "configCONV1.yml")

# Create a dialog menu
CHOICE=$(dialog --menu "Select Configuration File" 15 50 4 \
1 "${CONFIG_FILES[0]}" \
2 "${CONFIG_FILES[1]}" \
3 "${CONFIG_FILES[2]}" \
4 "${CONFIG_FILES[3]}" 3>&1 1>&2 2>&3)

# Determine the selected file
case $CHOICE in
    1) SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[0]}" ;;
    2) SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[1]}" ;;
    3) SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[2]}" ;;
    4) SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[3]}" ;;
    *) echo "Invalid choice"; exit 1 ;;
esac

# Backup the original file before making changes
cp $SELECTED_FILE "${SELECTED_FILE}.bak"

# Prompt for new ID
NEW_ID=$(dialog --inputbox "Enter the new ID:" 8 40 3>&1 1>&2 2>&3)

# Check if NEW_ID is empty
if [ -z "$NEW_ID" ]; then
    dialog --msgbox "ID cannot be empty. Exiting." 10 30
    clear
    exit 1
fi

# Update the selected file with the new ID using yq
yq eval ".network.id = \"$NEW_ID\"" -i $SELECTED_FILE

# Read back the modified data
MODIFIED_DATA=$(cat $SELECTED_FILE)

# Display the modified data
dialog --msgbox "Modified Configuration:\n\n$MODIFIED_DATA" 20 80

# Close the dialog program
clear


# Ask user if they want to clean up the temporary files
cmd=(dialog --menu "Cleanup temporary files?" 22 76 16)
options=(
   1 "Yes"
   2 "No"
)
cleanup_choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

# Cleanup based on user choice
case $cleanup_choice in
    1)
        rm -rf /opt/centrunk/installer/master.zip
        rm -rf /opt/centrunk/installer/
        ;;
    2)
        echo "Skipping cleanup"
        ;;
esac

exit 0
