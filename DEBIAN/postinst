#!/bin/bash

set -e
git config http.postBuffer 524288000
git config --global http.version HTTP/1.1

# Function to install yq based on architecture
install_yq() {
    case "$(uname -m)" in
        "x86_64")
            ARCH="amd64"
            ;;
        "aarch64")
            ARCH="arm64"
            ;;
        "armv7l")
            ARCH="arm"
            ;;
        "i386")
            ARCH="386"
            ;;
        *)
            echo "Unsupported architecture for yq installation"
            exit 1
            ;;
    esac
    wget -q "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$ARCH" -O /usr/bin/yq && chmod +x /usr/bin/yq
}

# Function to edit configuration file
edit_config() {
    CONFIG_DIR="/opt/centrunk/configs"
    CONFIG_FILES=("configCC1.yml" "configVC1.yml" "configDVRS1.yml" "configCONV1.yml")

    CHOICE=$(dialog --menu "Select Configuration File" 15 50 4 \
    1 "${CONFIG_FILES[0]}" \
    2 "${CONFIG_FILES[1]}" \
    3 "${CONFIG_FILES[2]}" \
    4 "${CONFIG_FILES[3]}" 3>&1 1>&2 2>&3)

    case $CHOICE in
        1) 
            SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[0]}"
            SERVICE_NAME="centrunk.cc.service"
            ;;
        2) 
            SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[1]}"
            SERVICE_NAME="centrunk.vc.service"
            ;;
        3) 
            SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[2]}"
            SERVICE_NAME="centrunk.dvrs.service"
            ;;
        4) 
            SELECTED_FILE="${CONFIG_DIR}/${CONFIG_FILES[3]}"
            SERVICE_NAME="centrunk.conv.service"
            ;;
        *) 
            echo "Invalid choice"
            exit 1 
            ;;
    esac
    DEFAULT_PORT="/dev/ttyAMA0"
    
    NEW_ID=$(dialog --inputbox "Enter the new NODE ID:" 8 40 3>&1 1>&2 2>&3)
    NEW_REST_ADDRESS=$(dialog --inputbox "Enter the new REST Address:" 8 40 3>&1 1>&2 2>&3)
    NEW_REST_PASSWORD=$(dialog --inputbox "Enter the new REST PASSWORD:" 8 40 3>&1 1>&2 2>&3)
    NEW_SYSTEM_IDENTITY=$(dialog --inputbox "Enter the new System Identity:" 8 40 3>&1 1>&2 2>&3)
    NEW_CH_CHANID=$(dialog --inputbox "Enter the new Channel Number:" 8 40 3>&1 1>&2 2>&3)
    NEW_CH_CHANNO=$(dialog --inputbox "Enter the new Channel Number:" 8 40 3>&1 1>&2 2>&3)
    NEW_VOICE_CH_CHANNO=$(dialog --inputbox "Enter the new Voice Channel Number:" 8 40 3>&1 1>&2 2>&3)
    NEW_VOICE_CH_REST_ADDRESS=$(dialog --inputbox "Enter the new Voice Channel Number REST Address:" 8 40 3>&1 1>&2 2>&3)
    NEW_VOICE_CH_REST_PASSWORD=$(dialog --inputbox "Enter the new Voice Channel Number REST PASSWORD:" 8 40 3>&1 1>&2 2>&3)
    NEW_NAC=$(dialog --inputbox "Enter the new NAC:" 8 40 3>&1 1>&2 2>&3)
    NEW_SITE_ID=$(dialog --inputbox "Enter the new Site ID:" 8 40 3>&1 1>&2 2>&3)
    NEW_PORT=$(dialog --inputbox "Enter the new device Port" 8 40 "$DEFAULT_PORT" 3>&1 1>&2 2>&3 3>&-)

    if [ -z "$NEW_ID" ] || [ -z "$NEW_REST_ADDRESS" ] || [ -z "$NEW_SYSTEM_IDENTITY" ] || [ -z "$NEW_VOICE_CH_REST_ADDRESS" ] || [ -z "$NEW_SITE_ID" ] || [ -z "$NEW_NAC" ]; then
        dialog --msgbox "All fields are required. Exiting." 10 40
        clear
        exit 1
    fi

    yq eval -i ".network.id = \"$NEW_ID\"" $SELECTED_FILE
    yq eval -i ".network.restAddress = \"$NEW_REST_ADDRESS\"" $SELECTED_FILE
    yq eval -i ".network.restPassword = \"$NEW_REST_PASSWORD    \"" $SELECTED_FILE
    yq eval -i ".system.identity = \"$NEW_SYSTEM_IDENTITY\"" $SELECTED_FILE
    yq eval -i ".system.config.channelId = \"$NEW_CH_CHANID\"" $SELECTED_FILE
    yq eval -i ".system.config.channelNo = \"$NEW_CH_CHANNO\"" $SELECTED_FILE
    yq eval -i ".system.config.voiceChNo[0].channelNo = \"$NEW_VOICE_CH_CHANNO\"" $SELECTED_FILE
    yq eval -i ".system.config.voiceChNo[0].restAddress = \"$NEW_VOICE_CH_REST_ADDRESS\"" $SELECTED_FILE
    yq eval -i ".system.config.voiceChNo[0].restPassword = \"$NEW_VOICE_CH_REST_PASSWORD\"" $SELECTED_FILE
    yq eval -i ".system.config.nac = \"$NEW_NAC\"" $SELECTED_FILE
    yq eval -i ".system.config.siteId = \"$NEW_SITE_ID\"" $SELECTED_FILE
    yq eval -i ".system.modem.protocol.uart.port = \"$NEW_PORT\"" $SELECTED_FILE

    create_service_file $SERVICE_NAME
}

# Function to create service files
create_service_file() {
    SERVICE_NAME=$1
    SERVICE_CONTENT="[Unit]
Description=Centrunk Service
After=network.target

[Service]
ExecStart=/opt/centrunk/dvmhost/dvmhost -c /opt/centrunk/configs/$(basename $SELECTED_FILE)
Restart=always
User=root

[Install]
WantedBy=multi-user.target"

    echo "$SERVICE_CONTENT" | sudo tee /etc/systemd/system/$SERVICE_NAME
    sudo systemctl daemon-reload
    sudo systemctl enable $SERVICE_NAME
    sudo systemctl start $SERVICE_NAME
}

# Function to install a website
install_website() {
    wget -q https://github.com/hannajohnsona/dashboard/archive/refs/heads/main.zip -O /tmp/dashboard.zip
    unzip -q /tmp/dashboard.zip -d /tmp/
    sudo mkdir -p /var/www/html/dashboard/

    # Copy files, excluding control/_config.php if it exists
    find /tmp/dashboard-main/ -type f | while read file; do
        dest_file="/var/www/html/dashboard${file#/tmp/dashboard-main}"
        if [[ $dest_file == */control/_config.php ]] && [[ -f $dest_file ]]; then
            continue
        fi
        sudo mkdir -p "$(dirname "$dest_file")"
        sudo cp --preserve=timestamps "$file" "$dest_file"
    done

    rm /tmp/dashboard.zip
    rm -rf /tmp/dashboard-main
}

# Requirements menu for yq
cmd=(dialog --menu "Choose requirements option:" 22 76 16)
options=(
  1 "Install yq"
  2 "None"
)
requirements_choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear 

case $requirements_choice in
    1)
        install_yq
        ;;
    2)
        echo "Skipping Requirements"
        ;;
esac

mkdir -p /opt/centrunk/installer
cd /opt/centrunk/installer

wget -q https://github.com/DVMProject/dvmhost/archive/refs/heads/master.zip
unzip -q master.zip

cd dvmhost-master

cmd=(dialog --menu "Choose the cross-compile option:" 22 76 16)
options=(
   1 "CROSS_COMPILE_ARM"
   2 "CROSS_COMPILE_AARCH64"
   3 "CROSS_COMPILE_RPI_ARM"
   4 "Native"
   5 "Continue"
)
choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

mkdir -p /opt/centrunk/installer/build
cd /opt/centrunk/installer/build

case $choice in
    1)
        cmake /opt/centrunk/installer/dvmhost-master .. -DCROSS_COMPILE_ARM=1
        ;;
    2)
        cmake /opt/centrunk/installer/dvmhost-master .. -DCROSS_COMPILE_AARCH64=1
        ;;
    3)
        cmake /opt/centrunk/installer/dvmhost-master .. -DCROSS_COMPILE_RPI_ARM=1
        ;;
    4)
        cmake /opt/centrunk/installer/dvmhost-master ..
        ;;
    5)
        echo "Continuing to the configuration step"
        ;;
esac

if [[ $choice -ne 5 ]]; then
    make
    mkdir -p /opt/centrunk/dvmhost/
    mv dvmhost dvmcmd /opt/centrunk/dvmhost/
fi

edit_config

cmd=(dialog --menu "Cleanup temporary files?" 22 76 16)
options=(
   1 "Yes"
   2 "No"
)
cleanup_choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear

case $cleanup_choice in
    1)
        rm -rf /opt/centrunk/installer/master.zip /opt/centrunk/installer/
        ;;
    2)
        echo "Skipping cleanup"
        ;;
esac

cmd=(dialog --menu "Install website?" 22 76 16)
options=(
   1 "Yes"
   2 "No"
)
website_choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

clear
case $website_choice in
    1)
        install_website
        ip_address=$(hostname -I | awk '{print $1}')
        dialog --msgbox "Dashboard installation complete.\n\n You may access the Dashboard at http://$ip_address/dashboard\n\nDefault Username: admin\nPassword: password123!\n\nContact Elleran for API key for full access!" 20 70
        ;;
    2)
        echo "Skipping website installation"
        ;;
esac
clear
exit 0